<?php

namespace App\Console\Commands;

use App\Models\Collection;
use App\Models\EmailSent;
use App\Models\Participation;
use App\Models\User;
use App\Notifications\AllParticipantsEmail;
use App\Notifications\EmailNotification;
use App\Notifications\TelegramNotification;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Notification;

class PayReminder extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'PayReminder';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ–± –æ–ø–ª–∞—Ç–µ';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return int
     */
    public function handle()
    {
        $collections_part_pay = Collection::where('col_status_id', 1)->get();
        $sent_to_users_amount = 0;

        foreach ($collections_part_pay as $colletion) {
            $users_from_participation = Participation::where('collection_id', $colletion['id'])->where('pat_status_id', 2)->get('user_id')->toArray();
            $users = User::whereIn('id', $users_from_participation)->get();
            $sent_to_users = "";


            foreach ($users as $user) {
                $sent_to_users = $sent_to_users . $user['id'] . ";";
                $sent_to_users_amount += 1;
                $user->notify(new EmailNotification(
                        '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ!',
                        $user['name'],
                        '–û—Å—Ç–∞–ª—Å—è –≤—Å–µ–≥–æ –æ–¥–∏–Ω —à–∞–≥ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Ä—è–¥—ã –∞–≤—Ç–æ—Ä–æ–≤ —Å–±–æ—Ä–Ω–∏–∫–∞ "' . $colletion['title'] . '"! –ú—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤—ã –≤–∫–ª—é—á–∏—Ç—å –≤–∞—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã. –°–¥–µ–ª–∞—Ç—å —ç—Ç–æ –º–æ–∂–Ω–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ, –ø–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ. –ï—Å–ª–∏ –≤—ã —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç–µ—Å—å —Å –∫–∞–∫–∏–º–∏-–ª–∏–±–æ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–∏ –Ω–∞–º –∑–Ω–∞—Ç—å –≤ —á–∞—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —É—á–∞—Å—Ç–∏—è.',
                        '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ',
                        route('homePortal') . "/myaccount/collections/" . $colletion['id'] . "/participation/" . Participation::where([['user_id', $user->id], ['collection_id', $colletion['id']]])->value('id'))
                );
            }

            // ---- –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∏—Å—å–º–æ! ---- //
            $new_EmailSent = new EmailSent();
            $new_EmailSent->collection_id = $colletion['id'];
            $new_EmailSent->subject = '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ!';
            $new_EmailSent->email_text = '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ';
            $new_EmailSent->sent_to_user = substr($sent_to_users, 0, -1);
            $new_EmailSent->save();
            // ---- //// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∏—Å—å–º–æ! ---- //


        }


        $url_back = "https://pervajakniga.ru/admin_panel/col";

        // –ü–æ—Å—ã–ª–∞–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–º
        if ($sent_to_users_amount === 0) {
            $tel_text = "üìß *–ê–≤—Ç–æ—Ä–æ–≤ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ*";
        } else {
            $tel_text = "üìß *–£—Å–ø–µ—à–Ω–æ –Ω–∞–ø–æ–º–Ω–∏–ª–∏ " . $sent_to_users_amount . " –∞–≤—Ç–æ—Ä–∞–º –æ–± –æ–ø–ª–∞—Ç–µ*";
        }
        Notification::route('telegram', '-506622812')
            ->notify(new TelegramNotification($tel_text,
                "",
                "–ê–¥–º–∏–Ω–∫–∞",
                $url_back));

    }
}
