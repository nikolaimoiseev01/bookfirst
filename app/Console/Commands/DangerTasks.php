<?php

namespace App\Console\Commands;

use App\Models\Collection;
use App\Models\New_covers_readiness;
use App\Models\own_book;
use App\Notifications\TelegramNotification;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Notification;
use Jenssegers\Date\Date;

class DangerTasks extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'DangerTasks';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command description';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $debug_mode = True;
        $message_arrays = [];
        $priskazki = [
            '–í—ã –ø–æ–≥–ª—è—Ç–∏–¥–∏—Ç–µ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è!',
            '–ì–∞–ª—è, –æ—Ç–º–µ–Ω–∞!',
            '–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä–∞—Å–∫–∞—á–∫—É!',
            '–í—Å–µ –Ω–∞ –±–∞—Ä—Ä–∏–∫–∞–¥—ã!',
            '–ù–µ —Å–ø–∞—Ç—å!',
            '–•–æ—Ç–µ–ª–∏ –∫–∞–∫ –ª—É—á—à–µ, –∞ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫–∞–∫ –≤—Å–µ–≥–¥–∞.',
            '–ö–∞—Ä–µ—Ç—É –º–Ω–µ, –∫–∞—Ä–µ—Ç—É!',
            '–ó–¥–æ—Ä–æ–≤–∞, –±–∞–Ω–¥–∏—Ç—ã.',
            '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ? –ù–µ –¥—É–º–∞—é...',
            '–ü–æ—á–µ–º –æ–ø–∏—É–º –¥–ª—è –Ω–∞—Ä–æ–¥–∞?!',
            'Show must go on!',
            '–°–ø–æ–∫–æ–π–Ω–æ! –°—è–¥–µ–º –≤—Å–µ!',
            '–®–µ—Ñ, –≤—Å—ë –ø—Ä–æ–ø–∞–ª–æ!',
            '–•—å—é—Å—Ç–æ–Ω, —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º—ã!',
            '–î–µ–∂—É—Ä–Ω—ã–π –ø–æ —Ä–æ—Ç–µ, –Ω–∞ –≤—ã—Ö–æ–¥!',
            '–ù—É —á—Ç–æ, –¥–æ–∏–≥—Ä–∞–ª–∏—Å—å?!',
            '–î–∂–∏–Ω–≥–ª –±–µ–ª–ª–∑!',
            '–í–Ω–∏–º–∞–Ω–∏–µ –≤—Å–µ–º –ø–æ—Å—Ç–∞–º!',
            '–ù–µ–ª–∞–¥–Ω–æ —á—Ç–æ-—Ç–æ –≤ –î–∞—Ç—Å–∫–æ–º –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–µ...',
            '–°–≤–∏—Å—Ç–∞—Ç—å –≤—Å–µ—Ö –Ω–∞–≤–µ—Ä—Ö!',
        ];
        $priskazki_kris = [
            '–ö—Ä–∏—Å—Ç–∏–Ω–∫–∞, –µ—Å—Ç—å —Ä–∞–±–æ—Ç–∫–∞!',
            '–ö—Ä–∏—Å—Ç–∏–Ω–æ—á–∫–∞, –ø–æ–∏—â–∏ –≤—Ä–µ–º—è –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å!',
            '–ë–µ–∑ —Ç–µ–±—è –Ω–µ —Å–ø—Ä–∞–≤–ª—é—Å—å, –ö—Ä–∏—Å!',
            '–ö—Ä–∏—Å—Ç–∏–Ω–∫–∞, —á—Ç–æ –¥–µ–ª–∞—Ç—å? '
        ];
        $deadline_days_threshold = 5;

        //region -- –ò–¥–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É —Å–±–æ—Ä–Ω–∏–∫—É, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–Ω–∏—Ç—å –ø—Ä–æ –¥–µ–¥–ª–∞–π–Ω—ã
        $collections = Collection::where('col_status_id', '<>', 9)->get() ?? null;

        if ($collections) {
            foreach ($collections as $collection) {

                $text = null;

                $random_priskazka = $priskazki[array_rand($priskazki)];
                $title_short = str_replace(array('–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π', '–ü–æ—ç–∑–∏–∏', '–°–æ–∫—Ä–æ–≤–µ–Ω–Ω—ã–µ', '.', ' '), "", $collection->title);
                $title_short = str_replace(array('–í—ã–ø—É—Å–∫'), " ", $title_short);

                if ($collection['col_status_id'] == 1) {
                    $col_deadline = Date::parse($collection->col_date2)->format('j F');
                    $deadline_days = Date::parse($col_deadline)->diff(Date::now());
                    // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞ (deadline –≤ –±—É–¥—É—â–µ–º), –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                    $deadline_days = $deadline_days->days * ($deadline_days->invert === 0 ? -1 : 1);

                    if ($deadline_days < $deadline_days_threshold && $deadline_days >= 0)
                        $text = "*{$title_short}* –Ω—É–∂–Ω–æ —Å–≤–µ—Ä—Å—Ç–∞—Ç—å –¥–æ *{$col_deadline}*. –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {$deadline_days}";
                    elseif ($deadline_days < 0) {
                        $text = "*–ü–†–û–°–†–û–ß–ö–ê!* *{$title_short}* –Ω—É–∂–Ω–æ –±—ã–ª–æ —Å–≤–µ—Ä—Å—Ç–∞—Ç—å *{$col_deadline}*. –î–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏: " . $deadline_days * -1;
                    }

                } elseif ($collection['col_status_id'] == 2) {
                    $col_deadline = Date::parse($collection->col_date3)->format('j F');
                    $deadline_days = Date::parse($col_deadline)->diff(Date::now());
                    // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞ (deadline –≤ –±—É–¥—É—â–µ–º), –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                    $deadline_days = $deadline_days->days * ($deadline_days->invert === 0 ? -1 : 1);

                    if ($deadline_days < $deadline_days_threshold && $deadline_days >= 0)
                        $text = "*{$title_short}* –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –ø–µ—á–∞—Ç—å –¥–æ *{$col_deadline}*. –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {$deadline_days}";
                    elseif ($deadline_days < 0) {
                        $text = "*–ü–†–û–°–†–û–ß–ö–ê!* *{$title_short}* –Ω—É–∂–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–µ—á–∞—Ç—å –¥–æ *{$col_deadline}*. –î–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏: " . $deadline_days * -1;
                    }

                } elseif ($collection['col_status_id'] == 3) {
                    $col_deadline = Date::parse($collection->col_date4)->format('j F');
                    $deadline_days = Date::parse($col_deadline)->diff(Date::now());
                    // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞ (deadline –≤ –±—É–¥—É—â–µ–º), –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                    $deadline_days = $deadline_days->days * ($deadline_days->invert === 0 ? -1 : 1);

                    if ($deadline_days < $deadline_days_threshold && $deadline_days >= 0)
                        $text = "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –°–≤–µ—Ç–ª–∞–Ω–µ! *{$title_short}* –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–ø–µ—á–∞—Ç–∞–Ω –¥–æ *{$col_deadline}*. –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {$deadline_days}";
                    elseif ($deadline_days < 0) {
                        $text = "*–ü–†–û–°–†–û–ß–ö–ê!* *{$title_short}* –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –Ω–∞–ø–µ—á–∞—Ç–∞–Ω –¥–æ *{$col_deadline}*. –î–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏: " . $deadline_days * -1;
                    }

                }

                if ($text ?? null) {
                    array_push($message_arrays, [
                        'title' => "üî• *{$random_priskazka}*",
                        'text' => $text
                    ]);
                }


            }
        }

        //endregion


        //region -- –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ö—Ä–∏—Å, —á—Ç–æ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –æ–±–ª–æ–∂–µ–∫

        $random_priskazka_kris = $priskazki_kris[array_rand($priskazki_kris)];

        $eol_collections = Collection::where('col_status_id', '<', 3)->first();

        if ($eol_collections['col_status_id'] == 1) {
            $col_deadline = Date::parse($eol_collections->col_date2)->format('j F');
        } else {
            $col_deadline = Date::parse($eol_collections->col_date3)->format('j F');
        }

        $deadline_days = Date::parse($col_deadline)->diff(Date::now());
        // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞ (deadline –≤ –±—É–¥—É—â–µ–º), –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        $deadline_days = $deadline_days->days * ($deadline_days->invert === 0 ? -1 : 1);
        $new_covers_ready = New_covers_readiness::first();

        if ($new_covers_ready['flg_ready'] == '–ñ–¥–µ–º –Ω–æ–≤—ã—Ö –æ–±–ª–æ–∂–µ–∫') {
            if ($deadline_days >= 0)
                $text_kris = "–ù–∞ –∑–∞–ø—É—Å–∫ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–±–æ—Ä–Ω–∏–∫–æ–≤ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –æ–±–ª–æ–∂–µ–∫ :(";
            elseif ($deadline_days < 0) {
                $text_kris = "–°–±–æ—Ä–Ω–∏–∫–∏ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∞ –Ω–æ–≤—ã—Ö –æ–±–ª–æ–∂–µ–∫ –≤—Å–µ –Ω–µ—Ç :(";
            }
        }

        if ($text_kris ?? null) {
            array_push($message_arrays, [
                'title' => "üî• *{$random_priskazka_kris}*",
                'text' => $text_kris
            ]);
        }
        //endregion


        //region -- –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥
        $own_book_insides = own_book::where('own_book_status_id', 3)->where('own_book_inside_status_id', 1)->orwhere('own_book_inside_status_id', 3)->get() ?? null;
        $own_book_covers = own_book::where('own_book_status_id', 3)->where('own_book_cover_status_id', 1)->orwhere('own_book_cover_status_id', 3)->get() ?? null;
        $own_book_need_prints = own_book::where('own_book_status_id', 5)->get() ?? null;

        if ($own_book_covers) {
            foreach ($own_book_covers as $key => $own_book) {
                $text_own_book_covers = null;
                $deadline_days = Date::parse($own_book['cover_deadline'])->diff(Date::now());
                // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞ (deadline –≤ –±—É–¥—É—â–µ–º), –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                $deadline_days = $deadline_days->days * ($deadline_days->invert === 0 ? -1 : 1);

                $random_priskazka_kris = $priskazki_kris[array_rand($priskazki_kris)];

                if ($deadline_days < $deadline_days_threshold && $deadline_days >= 0)
                    $text_own_book_covers = "–£ –∞–≤—Ç–æ—Ä–∞ *" . $own_book['author'] . "* –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –æ–±–ª–æ–∂–∫—É! " . "–°—Ä–æ–∫ –¥–æ {$own_book['cover_deadline']}. –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {$deadline_days}";
                elseif ($deadline_days < 0) {
                    $text_own_book_covers = "*–ü–†–û–°–†–û–ß–ö–ê!* –£ –∞–≤—Ç–æ—Ä–∞ *" . $own_book['author'] . "* –Ω—É–∂–Ω–æ –±—ã–ª–æ –¥–µ–ª–∞—Ç—å –æ–±–ª–æ–∂–∫—É! " . "–î–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏: " . $deadline_days * -1;
                }

                if ($text_own_book_covers ?? null) {
                    array_push($message_arrays, [
                        'title' => "üî• *{$random_priskazka_kris}*",
                        'text' => $text_own_book_covers
                    ]);
                }
            }
        }


        if ($own_book_insides) {
            foreach ($own_book_insides as $key => $own_book) {
                $text_own_book_insides = null;
                $deadline_days = Date::parse($own_book['cover_deadline'])->diff(Date::now());
                // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞ (deadline –≤ –±—É–¥—É—â–µ–º), –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                $deadline_days = $deadline_days->days * ($deadline_days->invert === 0 ? -1 : 1);

                $random_priskazka = $priskazki[array_rand($priskazki)];

                if ($deadline_days < $deadline_days_threshold && $deadline_days >= 0)
                    $text_own_book_insides = "–£ –∞–≤—Ç–æ—Ä–∞ *" . $own_book['author'] . "* –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –º–∞–∫–µ—Ç! " . "–°—Ä–æ–∫ –¥–æ {$own_book['cover_deadline']}. –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {$deadline_days}";
                elseif ($deadline_days < 0) {
                    $text_own_book_insides = "*–ü–†–û–°–†–û–ß–ö–ê!* –£ –∞–≤—Ç–æ—Ä–∞ *" . $own_book['author'] . "* –Ω—É–∂–Ω–æ –±—ã–ª–æ –¥–µ–ª–∞—Ç—å –º–∞–∫–µ—Ç! " . "–î–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏: " . $deadline_days * -1;
                }

                if ($text_own_book_insides ?? null) {
                    array_push($message_arrays, [
                        'title' => "üî• *{$random_priskazka}*",
                        'text' => $text_own_book_insides
                    ]);
                }
            }
        }


        if ($own_book_need_prints) {
            foreach ($own_book_need_prints as $own_book) {
                $random_priskazka = $priskazki[array_rand($priskazki)];
                $deadline_days = Date::parse($own_book['paid_at_print_only'])->diff(Date::now())->days;

                $text_own_book_need_prints = "–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–µ—á–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ *{$own_book['author']}*! –ñ–¥–µ—Ç —É–∂–µ –¥–Ω–µ–π: {$deadline_days}";

                if ($text_kris ?? null) {
                    array_push($message_arrays, [
                        'title' => "üî• *{$random_priskazka}*",
                        'text' => $text_own_book_need_prints
                    ]);
                }
            }
        }


        //endregion


        //region -- –ü–æ—Å—ã–ª–∞–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–º

        if ($message_arrays) {
            if ($debug_mode) {
                dd($message_arrays);
            } else {
                foreach ($message_arrays as $message) {
                    Notification::route('telegram', '-506622812')
                        ->notify(new TelegramNotification($message['title'], $message['text'], "–ê–¥–º–∏–Ω–∫–∞", "vk1.com"));
                    sleep(10);
                }
            }
        }


        //endregion

    }
}
