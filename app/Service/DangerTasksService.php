<?php

namespace App\Service;

use App\Models\Collection;
use App\Models\InnerTask;
use App\Models\New_covers_readiness;
use App\Models\own_book;
use App\Notifications\TelegramNotification;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Notification;
use Jenssegers\Date\Date;

class DangerTasksService
{
    public function update($manual_update = false)
    {
        $debug_mode = True;
        $message_arrays = [];
        $priskazki = [
            '–í—ã –ø–æ–≥–ª—è—Ç–∏–¥–∏—Ç–µ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è!',
            '–ì–∞–ª—è, –æ—Ç–º–µ–Ω–∞!',
            '–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä–∞—Å–∫–∞—á–∫—É!',
            '–í—Å–µ –Ω–∞ –±–∞—Ä—Ä–∏–∫–∞–¥—ã!',
            '–ù–µ —Å–ø–∞—Ç—å!',
            '–•–æ—Ç–µ–ª–∏ –∫–∞–∫ –ª—É—á—à–µ, –∞ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫–∞–∫ –≤—Å–µ–≥–¥–∞.',
            '–ö–∞—Ä–µ—Ç—É –º–Ω–µ, –∫–∞—Ä–µ—Ç—É!',
            '–ó–¥–æ—Ä–æ–≤–∞, –±–∞–Ω–¥–∏—Ç—ã.',
            '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ? –ù–µ –¥—É–º–∞—é...',
            '–ü–æ—á–µ–º –æ–ø–∏—É–º –¥–ª—è –Ω–∞—Ä–æ–¥–∞?!',
            'Show must go on!',
            '–°–ø–æ–∫–æ–π–Ω–æ! –°—è–¥–µ–º –≤—Å–µ!',
            '–®–µ—Ñ, –≤—Å—ë –ø—Ä–æ–ø–∞–ª–æ!',
            '–•—å—é—Å—Ç–æ–Ω, —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º—ã!',
            '–î–µ–∂—É—Ä–Ω—ã–π –ø–æ —Ä–æ—Ç–µ, –Ω–∞ –≤—ã—Ö–æ–¥!',
            '–ù—É —á—Ç–æ, –¥–æ–∏–≥—Ä–∞–ª–∏—Å—å?!',
            '–î–∂–∏–Ω–≥–ª –±–µ–ª–ª–∑!',
            '–í–Ω–∏–º–∞–Ω–∏–µ –≤—Å–µ–º –ø–æ—Å—Ç–∞–º!',
            '–ù–µ–ª–∞–¥–Ω–æ —á—Ç–æ-—Ç–æ –≤ –î–∞—Ç—Å–∫–æ–º –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–µ...',
            '–°–≤–∏—Å—Ç–∞—Ç—å –≤—Å–µ—Ö –Ω–∞–≤–µ—Ä—Ö!',
        ];
        $priskazki_kris = [
            '–ö—Ä–∏—Å—Ç–∏–Ω–∫–∞, –µ—Å—Ç—å —Ä–∞–±–æ—Ç–∫–∞!',
            '–ö—Ä–∏—Å—Ç–∏–Ω–æ—á–∫–∞, –ø–æ–∏—â–∏ –≤—Ä–µ–º—è –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å!',
            '–ë–µ–∑ —Ç–µ–±—è –Ω–µ —Å–ø—Ä–∞–≤–ª—é—Å—å, –ö—Ä–∏—Å!',
            '–ö—Ä–∏—Å—Ç–∏–Ω–∫–∞, —á—Ç–æ –¥–µ–ª–∞—Ç—å? '
        ];
        $innerTaskTitles = [
            '0' => '–°–¥–µ–ª–∞—Ç—å –æ–±–ª–æ–∂–∫—É —Å–±–æ—Ä–Ω–∏–∫—É',
            '1' => '–°–≤–µ—Ä—Å—Ç–∞—Ç—å —Å–±–æ—Ä–Ω–∏–∫',
            '2' => '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ —Å–±–æ—Ä–Ω–∏–∫–µ',
            '3' => '–í—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ —Å–±–æ—Ä–Ω–∏–∫–µ',
            '4' => '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–±–æ—Ä–Ω–∏–∫ –≤ –ø–µ—á–∞—Ç—å',
            '5' => '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—á–∞—Ç—å —Å–±–æ—Ä–Ω–∏–∫–∞',
            '6' => '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–±–æ—Ä–Ω–∏–∫ –ª—é–¥—è–º',

            '50' => [
                1 => '–°–≤–µ—Ä—Å—Ç–∞—Ç—å –í–ë',
                3 => '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –í–ë'
            ],
            '51' => [
                1 => '–°–¥–µ–ª–∞—Ç—å –æ–±–ª–æ–∂–∫—É',
                3 => '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ–±–ª–æ–∂–∫—É'
            ],
            '54' => '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É –Ω–∞ –ø–µ—á–∞—Ç—å',
            '55' => '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—á–∞—Ç—å –∫–Ω–∏–≥–∏',
        ];


        DB::Transaction(function () use ($debug_mode, $message_arrays, $priskazki, $priskazki_kris, $innerTaskTitles, $manual_update) {


            $deadline_days_threshold = 5;

            //region -- –ò–¥–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É —Å–±–æ—Ä–Ω–∏–∫—É, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–Ω–∏—Ç—å –ø—Ä–æ –¥–µ–¥–ª–∞–π–Ω—ã
            $collections = Collection::where('col_status_id', '<>', 9)->get() ?? null;

            if ($collections) {
                foreach ($collections as $collection) {

                    $title = null;
                    $text = null;
                    $innerTask = null;

                    $random_priskazka = $priskazki[array_rand($priskazki)];
                    $title_short = str_replace(array('–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π', '–ü–æ—ç–∑–∏–∏', '–°–æ–∫—Ä–æ–≤–µ–Ω–Ω—ã–µ', '.', ' '), "", $collection->title);
                    $title_short = str_replace(array('–í—ã–ø—É—Å–∫'), " ", $title_short);

                    if ($collection['col_status_id'] == 1) {
                        $col_deadline = Date::parse($collection->col_date2)->format('j F');
                        $deadline_days = Date::parse($col_deadline)->diff(Date::now());
                        // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞ (deadline –≤ –±—É–¥—É—â–µ–º), –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                        $deadline_days = $deadline_days->days * ($deadline_days->invert === 0 ? -1 : 1);

                        $title = "–ù—É–∂–Ω–∞ –≤–µ—Ä—Å—Ç–∫–∞ —Å–±–æ—Ä–Ω–∏–∫–∞! –î–Ω–µ–π: {$deadline_days}";

                        if ($deadline_days < $deadline_days_threshold && $deadline_days >= 0) {
                            $text = "*{$title_short}* –Ω—É–∂–Ω–æ —Å–≤–µ—Ä—Å—Ç–∞—Ç—å –¥–æ *{$col_deadline}*. –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {$deadline_days}";
                            $innerTask = [
                                'col_id' => $collection->id,
                                'type_id' => 1,
                                'title' => $innerTaskTitles[1],
                                'deadline' => $collection->col_date2
                            ];
                        } elseif ($deadline_days < 0) {
                            $text = "*–ü–†–û–°–†–û–ß–ö–ê!* *{$title_short}* –Ω—É–∂–Ω–æ –±—ã–ª–æ —Å–≤–µ—Ä—Å—Ç–∞—Ç—å *{$col_deadline}*. –î–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏: " . $deadline_days * -1;
                        }

                    } elseif ($collection['col_status_id'] == 2) {
                        $col_deadline = Date::parse($collection->col_date3)->format('j F');
                        $deadline_days = Date::parse($col_deadline)->diff(Date::now());
                        // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞ (deadline –≤ –±—É–¥—É—â–µ–º), –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                        $deadline_days = $deadline_days->days * ($deadline_days->invert === 0 ? -1 : 1);

                        $title = "–ù—É–∂–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–±–æ—Ä–Ω–∏–∫–∞! –î–Ω–µ–π: {$deadline_days}";

                        if ($deadline_days < $deadline_days_threshold && $deadline_days >= 0) {
                            $text = "*{$title_short}* –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –ø–µ—á–∞—Ç—å –¥–æ *{$col_deadline}*. –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {$deadline_days}";
                            $innerTask = [
                                'col_id' => $collection->id,
                                'type_id' => 1,
                                'title' => $innerTaskTitles[4],
                                'deadline' => $collection->col_date3
                            ];

                            /* –î–æ–ø –∑–∞–¥–∞—á–∞ */
                            $winners_deadline = Date::parse($collection->col_date3)->addDays(-3);
                            $winners_add_title = "–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π! –î–Ω–µ–π: {$winners_deadline}";
                            $winners_add_text = "*{$title_short}* –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –¥–æ *{$winners_deadline}*";
                            $winners_add_inner_task = [
                                'col_id' => $collection->id,
                                'type_id' => 1,
                                'title' => $innerTaskTitles[3],
                                'deadline' =>  $winners_deadline
                            ];
                            $message_arrays[] = [
                                'title' => "üî• *{$winners_add_title}*",
                                'text' => $winners_add_text,
                                'innerTask' => $winners_add_inner_task
                            ];

                        } elseif ($deadline_days < 0) {
                            $text = "*–ü–†–û–°–†–û–ß–ö–ê!* *{$title_short}* –Ω—É–∂–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–µ—á–∞—Ç—å –¥–æ *{$col_deadline}*. –î–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏: " . $deadline_days * -1;
                        }

                    } elseif ($collection['col_status_id'] == 3) {
                        $col_deadline = Date::parse($collection->col_date4)->format('j F');
                        $deadline_days = Date::parse($col_deadline)->diff(Date::now());
                        // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞ (deadline –≤ –±—É–¥—É—â–µ–º), –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                        $deadline_days = $deadline_days->days * ($deadline_days->invert === 0 ? -1 : 1);

                        $title = "–ü–µ—á–∞—Ç—å —Å–±–æ—Ä–Ω–∏–∫–∞ —É–∂–µ –≥–æ—Ç–æ–≤–∞! –î–Ω–µ–π: {$deadline_days}";

                        if ($deadline_days < $deadline_days_threshold && $deadline_days >= 0) {
                            $text = "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –°–≤–µ—Ç–ª–∞–Ω–µ! *{$title_short}* –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–ø–µ—á–∞—Ç–∞–Ω –¥–æ *{$col_deadline}*. –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {$deadline_days}";
                        } elseif ($deadline_days < 0) {
                            $text = "*–ü–†–û–°–†–û–ß–ö–ê!* *{$title_short}* –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –Ω–∞–ø–µ—á–∞—Ç–∞–Ω –¥–æ *{$col_deadline}*. –î–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏: " . $deadline_days * -1;
                        }

                    }


                    if ($text ?? null) {
                        $message_arrays[] = [
                            'title' => "üî• *{$title}*",
                            'text' => $text,
                            'innerTask' => $innerTask
                        ];
                    }


                }
            }

            //endregion


            //region -- –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ö—Ä–∏—Å, —á—Ç–æ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –æ–±–ª–æ–∂–µ–∫

            $random_priskazka_kris = $priskazki_kris[array_rand($priskazki_kris)];

            $eol_collections = Collection::where('col_status_id', '<', 3)->first();

            if ($eol_collections) {
                if ($eol_collections['col_status_id'] == 1) {
                    $col_deadline = Date::parse($eol_collections->col_date2)->format('j F');
                } else {
                    $col_deadline = Date::parse($eol_collections->col_date3)->format('j F');
                }


                $deadline_days = Date::parse($col_deadline)->diff(Date::now());
                // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞ (deadline –≤ –±—É–¥—É—â–µ–º), –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                $deadline_days = $deadline_days->days * ($deadline_days->invert === 0 ? -1 : 1);
                $new_covers_ready = New_covers_readiness::first();

                if ($new_covers_ready['flg_ready'] == '–ñ–¥–µ–º –Ω–æ–≤—ã—Ö –æ–±–ª–æ–∂–µ–∫') {
                    $title = "–ö–†–ò–°, –û–ë–õ–û–ñ–ö–ò!";
                    if ($deadline_days >= 0)
                        $text_kris = "–ù–∞ –∑–∞–ø—É—Å–∫ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–±–æ—Ä–Ω–∏–∫–æ–≤ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –æ–±–ª–æ–∂–µ–∫ :(";
                    elseif ($deadline_days < 0) {
                        $text_kris = "–°–±–æ—Ä–Ω–∏–∫–∏ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∞ –Ω–æ–≤—ã—Ö –æ–±–ª–æ–∂–µ–∫ –≤—Å–µ –Ω–µ—Ç :(";
                    }
                }

                if ($text_kris ?? null) {
                    $message_arrays[] = [
                        'title' => "üñå *{$title}*",
                        'text' => $text_kris
                    ];
                }
            }
            //endregion


            //region -- –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥
            $own_book_insides = own_book::where('own_book_status_id', 3)->where('own_book_inside_status_id', 1)->orwhere('own_book_inside_status_id', 3)->get() ?? null;
            $own_book_covers = own_book::where('own_book_status_id', 3)->where('own_book_cover_status_id', 1)->orwhere('own_book_cover_status_id', 3)->get() ?? null;
            $own_book_need_prints = own_book::where('own_book_status_id', 5)->get() ?? null;

            if ($own_book_covers) {
                foreach ($own_book_covers as $key => $own_book) {
                    $text_own_book_covers = null;
                    $innerTask = null;
                    $deadline_days = Date::parse($own_book['cover_deadline'])->diff(Date::now());
                    // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞ (deadline –≤ –±—É–¥—É—â–µ–º), –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                    $deadline_days = $deadline_days->days * ($deadline_days->invert === 0 ? -1 : 1);

                    $random_priskazka_kris = $priskazki_kris[array_rand($priskazki_kris)];

                    $title = "–ö–†–ò–°, –û–ë–õ–û–ñ–ö–ò! –î–Ω–µ–π: {$deadline_days}";

                    if ($deadline_days < $deadline_days_threshold && $deadline_days >= 0) {
                        $text_own_book_covers = "–£ –∞–≤—Ç–æ—Ä–∞ *" . $own_book['author'] . "* –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –æ–±–ª–æ–∂–∫—É! " . "–°—Ä–æ–∫ –¥–æ {$own_book['cover_deadline']}. –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {$deadline_days}";
                        $innerTask = [
                            'own_book_id' => $own_book['id'],
                            'type_id' => 2,
                            'title' => $innerTaskTitles[51][$own_book['own_book_cover_status_id']],
                            'original_status' => $own_book->own_book_cover_status['status_title'],
                            'deadline' => $own_book['cover_deadline']
                        ];
                    } elseif ($deadline_days < 0) {
                        $text_own_book_covers = "*–ü–†–û–°–†–û–ß–ö–ê!* –£ –∞–≤—Ç–æ—Ä–∞ *" . $own_book['author'] . "* –Ω—É–∂–Ω–æ –±—ã–ª–æ –¥–µ–ª–∞—Ç—å –æ–±–ª–æ–∂–∫—É! " . "–î–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏: " . $deadline_days * -1;
                    }

                    if ($text_own_book_covers ?? null) {
                        $message_arrays[] = [
                            'title' => "üñå *{$title}*",
                            'text' => $text_own_book_covers,
                            'innerTask' => $innerTask
                        ];
                    }
                }
            }


            if ($own_book_insides) {
                foreach ($own_book_insides as $key => $own_book) {
                    $text_own_book_insides = null;
                    $innerTask = null;
                    $deadline_days = Date::parse($own_book['inside_deadline'])->diff(Date::now());
                    // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞ (deadline –≤ –±—É–¥—É—â–µ–º), –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                    $deadline_days = $deadline_days->days * ($deadline_days->invert === 0 ? -1 : 1);

                    $random_priskazka = $priskazki[array_rand($priskazki)];

                    $title = "–°–ö. –ù—É–∂–Ω–æ –≤–µ—Ä—Å—Ç–∞—Ç—å! –î–Ω–µ–π: {$deadline_days}";

                    if ($deadline_days < $deadline_days_threshold && $deadline_days >= 0) {
                        $text_own_book_insides = "–£ –∞–≤—Ç–æ—Ä–∞ *" . $own_book['author'] . "* –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –º–∞–∫–µ—Ç! " . "–°—Ä–æ–∫ –¥–æ {$own_book['cover_deadline']}. –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {$deadline_days}";
                        $innerTask = [
                            'own_book_id' => $own_book['id'],
                            'type_id' => 2,
                            'title' => $innerTaskTitles[50][$own_book['own_book_inside_status_id']],
                            'original_status' => $own_book->own_book_inside_status['status_title'],
                            'deadline' => $own_book['inside_deadline']
                        ];

                    } elseif ($deadline_days < 0) {
                        $text_own_book_insides = "*–ü–†–û–°–†–û–ß–ö–ê!* –£ –∞–≤—Ç–æ—Ä–∞ *" . $own_book['author'] . "* –Ω—É–∂–Ω–æ –±—ã–ª–æ –¥–µ–ª–∞—Ç—å –º–∞–∫–µ—Ç! " . "–î–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏: " . $deadline_days * -1;
                    }

                    if ($text_own_book_insides ?? null) {
                        $message_arrays[] = [
                            'title' => "üî• *{$title}*",
                            'text' => $text_own_book_insides,
                            'innerTask' => $innerTask
                        ];
                    }
                }
            }


            if ($own_book_need_prints) {
                foreach ($own_book_need_prints as $own_book) {
                    $innerTask = null;
                    $deadline_days = Date::parse($own_book['paid_at_print_only'])->diff(Date::now())->days;

                    $text_own_book_need_prints = "–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–µ—á–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ *{$own_book['author']}*! –ñ–¥–µ—Ç —É–∂–µ –¥–Ω–µ–π: {$deadline_days}";

                    $title = "–°–ö. –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–µ—á–∞—Ç—å! –î–Ω–µ–π: {$deadline_days}";

                    $innerTask = [
                        'own_book_id' => $own_book['id'],
                        'type_id' => 2,
                        'title' => $innerTaskTitles[54],
                        'original_status' => $own_book->own_book_status['status_title'],
                        'deadline' =>  Date::parse($own_book['paid_at_print_only'])->addDays(2)
                    ];

                    if ($text_own_book_need_prints ?? null) {
                        $message_arrays[] = [
                            'title' => "üî• *{$title}*",
                            'text' => $text_own_book_need_prints,
                            'innerTask' => $innerTask
                        ];
                    }
                }
            }


            //endregion


            $innerTasks = InnerTask::all();

            foreach ($innerTasks as $innerTask) { /* –ò–¥–µ–º –ø–æ –≤—Å–µ–º –Ω–∞—à–∏–º, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–µ—Ö, —á—Ç–æ —É–∂–µ –Ω–µ—Ç */
                if ($innerTask['inner_task_type_id'] == 1) { /* –ï—Å–ª–∏ –ö–Ω–∏–≥–∏ */
                    $search_type = 'collection_id';
                } else {
                    $search_type = 'own_book_id';
                }
                $exists = collect($message_arrays)->contains(function ($task) use ($innerTask, $search_type) { /* –ï—â–µ–º –≤ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Ç–∞–∫—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é */
                    return
                        isset($task['innerTask'][$search_type])
                        && $task['innerTask'][$search_type] == $innerTask[$search_type]
                        && $task['innerTask']['title'] === $innerTask['title'];
                });
                if (!$exists) { /* –ï—Å–ª–∏ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ, —Ç–æ —É–¥–∞–ª—è–µ–º */
                    $innerTask->delete();
                }
            }




            $debug_mode = False;

            //region -- –ü–æ—Å—ã–ª–∞–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–º
            if ($message_arrays) {
                if ($debug_mode) {
                    dd($message_arrays);
                } else {
                    foreach ($message_arrays as $message) {
                        if(!$manual_update) { /* –ï—Å–ª–∏ –Ω–µ —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ */
                            Notification::route('telegram', config('cons.telegram_chat_id'))
                                ->notify(new TelegramNotification($message['title'], $message['text'], "–ê–¥–º–∏–Ω–∫–∞", "vk1.com"));
                        }
                        $innerTask = $message['innerTask'] ?? null;
                        if ($innerTask) {
                            if ($innerTask['type_id'] == 1) { // –ï—Å–ª–∏ –ø—Ä–æ —Å–±–æ—Ä–Ω–∏–∫ –∑–∞–¥–∞—á–∞, —Ç–æ –∏—â–µ–º –ø–æ collection_id
                                InnerTask::updateOrCreate(
                                    [
                                        'title' => $innerTask['title'], // –ü–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
                                        'inner_task_type_id' => $innerTask['type_id'],
                                        'collection_id' => $innerTask['col_id'],
                                    ],
                                    [
                                        'inner_task_status_id' => 1,
                                        'deadline_inner' => $innerTask['deadline']
                                    ]
                                );
                            } elseif ($innerTask['type_id'] == 2) { // –ï—Å–ª–∏ –ø—Ä–æ –∫–Ω–∏–≥—É –∑–∞–¥–∞—á–∞, —Ç–æ –∏—â–µ–º –ø–æ own_book_id
                                InnerTask::updateOrCreate(
                                    [
                                        'title' => $innerTask['title'], // –ü–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
                                        'inner_task_type_id' => $innerTask['type_id'],
                                        'own_book_id' => $innerTask['own_book_id'],
                                    ],
                                    [
                                        'inner_task_status_id' => 1,
                                        'deadline_inner' => $innerTask['deadline']
                                    ]
                                );
                            }
                        }
                        sleep(0.5);
                    }
                }
            }
        });

        //endregion

    }
}
