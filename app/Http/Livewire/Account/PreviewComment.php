<?php

namespace App\Http\Livewire\Account;

use App\Models\Message;
use App\Models\own_book;
use App\Models\Participation;
use App\Models\preview_comment;
use App\Notifications\TelegramNotification;
use Carbon\Carbon;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Notification;
use Illuminate\Support\Facades\Validator;
use Livewire\Component;

class PreviewComment extends Component
{

    public $text;
    public $page;
    public $comments;
    public $collection_id;
    public $own_book_id;
    public $own_book_comment_type;
    public $preview_comment_type;

    protected $listeners = ['delete_preview_comment'];

    public function render()
    {
        return view('livewire.account.preview-comment', [
            'comments' => $this->comments,
            'comment_type' => $this->own_book_comment_type,
            'preview_comment_type' => $this->preview_comment_type,
        ]);
    }

    public function mount($collection_id, $own_book_id, $own_book_comment_type)
    {
        $this->collection_id = $collection_id;
        $this->own_book_id = $own_book_id;
        $this->own_book_comment_type = $own_book_comment_type;
        if ($this->collection_id <> 0) {
            $this->comments = preview_comment::where([['user_id', Auth::user()->id], ['collection_id', $collection_id]])->get();
        }
        if ($this->own_book_id <> 0) {
            $this->comments = preview_comment::where([['user_id', Auth::user()->id], ['own_book_id', $own_book_id], ['own_book_comment_type', $own_book_comment_type]])->get();
        }

        if ($this->own_book_id <> 0) {
            $this->preview_comment_type = 'own_book';
        } else {
            $this->preview_comment_type = 'collection';
        }

    }

    public function new_message()
    {

        $this->error_texts = [];

        if (!$this->text) {
            array_push($this->error_texts, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!');
        }

        if ($this->own_book_comment_type == 'inside' && !$this->page) {
            array_push($this->error_texts, '–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É!');
        }

        if (!empty($this->error_texts)) {
            $this->dispatchBrowserEvent('swal:modal', [
                'type' => 'error',
                'title' => '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!',
                'text' => implode("<br>", $this->error_texts),
            ]);
            return false;
        } else {
            $new_comment = new preview_comment();
            $new_comment->user_id = Auth::user()->id;
            if ($this->collection_id <> 0) {
                $new_comment->collection_id = $this->collection_id;
                $new_comment->participation_id = Participation::where([['user_id', Auth::user()->id], ['collection_id', $this->collection_id]])->value('id');
            } elseif ($this->own_book_id <> 0) {
                $new_comment->own_book_id = $this->own_book_id;
                $new_comment->own_book_comment_type = $this->own_book_comment_type;
            }
            $new_comment->page = $this->page;
            $new_comment->text = $this->text;
            $new_comment->status_done = 0;
            $new_comment->save();

            if ($this->collection_id <> 0) {
                $this->comments = preview_comment::where([['user_id', Auth::user()->id], ['collection_id', $this->collection_id]])->get();
            } elseif ($this->own_book_id <> 0) {
                $this->comments = preview_comment::where([['user_id', Auth::user()->id], ['own_book_id', $this->own_book_id], ['own_book_comment_type', $this->own_book_comment_type]])->get();
            }
            $this->text = '';
            $this->page = '';
        }
    }

    public function delete_confirm($comment_id)
    {
        $this->dispatchBrowserEvent('swal:confirm', [
            'type' => 'warning',
            'title' => '–í–Ω–∏–º–∞–Ω–∏–µ!',
            'html' => '<p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å)?</p>',
            'onconfirm' => 'delete_preview_comment',
            'id' => $comment_id
        ]);
    }

    public function delete_preview_comment($comment_id)
    {

        preview_comment::where('id', $comment_id)->delete();
//        $this->dispatchBrowserEvent('swal:modal', [
//            'type' => 'success',
//            'title' => '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!',
//        ]);

        if ($this->collection_id <> 0) {
            $this->comments = preview_comment::where([['user_id', Auth::user()->id], ['collection_id', $this->collection_id]])->get();
        } elseif ($this->own_book_id <> 0) {
            $this->comments = preview_comment::where([['user_id', Auth::user()->id], ['own_book_id', $this->own_book_id], ['own_book_comment_type', $this->own_book_comment_type]])->get();
        }

    }

    public function change_inside_status($status_id)
    {

        $errors_array = [];

        $prev_comments_cnt = preview_comment::where('own_book_id', $this->own_book_id)->where('own_book_comment_type', 'inside')->where('status_done', 0)->count();

        if ($status_id <> 4 && $prev_comments_cnt === 0) {
            array_push($errors_array, '–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º—É, –∑–∞—Ç–µ–º –Ω–∞–∂–∞—Ç—å –Ω–∞ "—Å–∞–º–æ–ª–µ—Ç–∏–∫" —Å–ø—Ä–∞–≤–∞)');
        }

        if (!empty($errors_array)) {
            $this->dispatchBrowserEvent('swal:modal', [
                'type' => 'error',
                'title' => '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!',
                'text' => implode("<br>", $errors_array),
            ]);
        }

        // --------- //–ò—â–µ–º –æ—à–∏–±–∫–∏ –≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏  --------- //


        if (empty($errors_array)) {

            own_book::where('id', $this->own_book_id)->update([
                'own_book_inside_status_id' => $status_id,
                'inside_deadline' => Carbon::now()->addDays(5)->toDate(),
            ]);

            $cover_status = own_book::where('id', $this->own_book_id)->value('own_book_cover_status_id');
            $print_price = own_book::where('id', $this->own_book_id)->value('print_price');
            $total_status_needed = 3;

            if ($status_id === 4) {
                if ($cover_status === 4 & $print_price > 0) {
                    $total_status_needed = 4;
                    $alert_text = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–ª–æ–∫ –∏ –æ–±–ª–æ–∂–∫–∞ –±—ã–ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã! –î–∞–ª–µ–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤ –±–ª–æ–∫–µ "–ü–µ—á–∞—Ç—å" –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏.';
                } elseif ($cover_status === 4 & !($print_price > 0)) {
                    $total_status_needed = 9;
                    $alert_text = '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–ª–æ–∫ –±—ã–ª —É—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–∞–∫ –∫–∞–∫ –æ–±–ª–æ–∂–∫–∞ –±—ã–ª–∞ —Ç–æ–∂–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –∞ –ø–µ—á–∞—Ç—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –º—ã –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –í–∞—Å —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–¥–∞–Ω–∏—è!';
                } else {
                    $total_status_needed = 3;
                    $alert_text = '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–ª–æ–∫ –±—ã–ª —É—Ç–≤–µ—Ä–∂–¥–µ–Ω!';
                }
            }

            own_book::where('id', $this->own_book_id)->update([
                'own_book_status_id' => $total_status_needed,
            ]);


            session()->flash('success', 'success');
            session()->flash('alert_text', '–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω!');
            if ($status_id === 3) {
                session()->flash('alert_text', '–û—Ç–ª–∏—á–Ω–æ! –ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –≤–Ω–æ—Å–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –°—Ä–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è - 5 –¥–Ω–µ–π. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–∫–æ–Ω—á–∏–º, –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ, –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–ª–æ–∫ —Å–Ω–æ–≤–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.');
            } elseif ($status_id === 4) {
                session()->flash('alert_text', $alert_text);
            }

            if($status_id == 3) {// –ï—Å–ª–∏ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—à–ª–∏
                $title = '‚úçüèº –ê–≤—Ç–æ—Ä –ø–æ—Å–ª–∞–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –í–ë! ‚úçüèº';
                $text = "*–ö–Ω–∏–≥–∞:* " . own_book::where('id', $this->own_book_id)->value('author') . ': "'
                    . own_book::where('id', $this->own_book_id)->value('title') . '"' .
                    "\n*–î–µ–∞–¥–ª–∞–π–Ω –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* " . Carbon::now()->addDays(5)->toDateString();
            } elseif($status_id == 4) {// –ï—Å–ª–∏ –≥–æ—Ç–æ–≤–∞—è –∫ –∏–∑–¥–∞–Ω–∏—é
                $title = '‚úÖ –ê–≤—Ç–æ—Ä —É—Ç–≤–µ—Ä–¥–∏–ª –í–ë! ‚úÖ';
                $text = "*–ö–Ω–∏–≥–∞:* " .  own_book::where('id', $this->own_book_id)->value('author') . ': "'
                . own_book::where('id', $this->own_book_id)->value('title') . '"';
            }


            // –ü–æ—Å—ã–ª–∞–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–º
            Notification::route('telegram', '-506622812')
                ->notify(new TelegramNotification($title,
                    $text,
                    "–ï–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–¥–∞–Ω–∏—è",
                    route('own_books_page', $this->own_book_id)));


            return redirect()->to(url()->previous());


        }
    }

    public function change_cover_status($status_id)
    {

        $errors_array = [];

        $prev_comments_cnt = preview_comment::where('own_book_id', $this->own_book_id)->where('own_book_comment_type', 'cover')->where('status_done', 0)->count();

        if ($status_id <> 4 && $prev_comments_cnt === 0) {
            array_push($errors_array, '–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º—É, –∑–∞—Ç–µ–º –Ω–∞–∂–∞—Ç—å –Ω–∞ "—Å–∞–º–æ–ª–µ—Ç–∏–∫" —Å–ø—Ä–∞–≤–∞.');
        }

        if (!empty($errors_array)) {
            $this->dispatchBrowserEvent('swal:modal', [
                'type' => 'error',
                'title' => '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!',
                'text' => implode("<br>", $errors_array),
            ]);
        }

        // --------- //–ò—â–µ–º –æ—à–∏–±–∫–∏ –≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏  --------- //


        if (empty($errors_array)) {

            own_book::where('id', $this->own_book_id)->update([
                'own_book_cover_status_id' => $status_id,
                'cover_deadline' => Carbon::now()->addDays(5)->toDate(),
            ]);


            $inside_status = own_book::where('id', $this->own_book_id)->value('own_book_inside_status_id');
            $print_price = own_book::where('id', $this->own_book_id)->value('print_price');
            $total_status_needed = 3;

            if ($status_id === 4) {
                if ($inside_status === 4 & $print_price > 0) {
                    $total_status_needed = 4;
                    $alert_text = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–ª–æ–∫ –∏ –æ–±–ª–æ–∂–∫–∞ –±—ã–ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã! –î–∞–ª–µ–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤ –±–ª–æ–∫–µ "–ü–µ—á–∞—Ç—å" –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏.';
                } elseif ($inside_status === 4 & !($print_price > 0)) {
                    $total_status_needed = 9;
                    $alert_text = '–û–±–ª–æ–∂–∫–∞ –±—ã–ª–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–∞–∫ –∫–∞–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–ª–æ–∫ –±—ã–ª —Ç–æ–∂–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω, –∞ –ø–µ—á–∞—Ç—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –º—ã –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –í–∞—Å —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–¥–∞–Ω–∏—è!';
                } else {
                    $total_status_needed = 3;
                    $alert_text = '–û–±–ª–æ–∂–∫–∞ –±—ã–ª–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!';
                }
            }

            own_book::where('id', $this->own_book_id)->update([
                'own_book_status_id' => $total_status_needed,
            ]);


            session()->flash('success', 'success');
            session()->flash('alert_text', '–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω!');
            if ($status_id === 3) {
                session()->flash('alert_text', '–û—Ç–ª–∏—á–Ω–æ! –ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –≤–Ω–æ—Å–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –°—Ä–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è - 5 –¥–Ω–µ–π. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–∫–æ–Ω—á–∏–º, –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ, –∏ –æ–±–ª–æ–∂–∫—É —Å–Ω–æ–≤–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.');
            } elseif ($status_id === 4) {
                session()->flash('alert_text', $alert_text);
            }

            if($status_id == 3) {// –ï—Å–ª–∏ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—à–ª–∏
                $title = '‚úçüèº –ê–≤—Ç–æ—Ä –ø–æ—Å–ª–∞–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –æ–±–ª–æ–∂–∫–µ! ‚úçüèº';
                $text = "*–ö–Ω–∏–≥–∞:* " . own_book::where('id', $this->own_book_id)->value('author') . ': "'
                    . own_book::where('id', $this->own_book_id)->value('title') . '"' .
                    "\n*–î–µ–∞–¥–ª–∞–π–Ω –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* " . Carbon::now()->addDays(5)->toDateString();
            } elseif($status_id == 4) {// –ï—Å–ª–∏ –≥–æ—Ç–æ–≤–∞—è –∫ –∏–∑–¥–∞–Ω–∏—é
                $title = '‚úÖ –ê–≤—Ç–æ—Ä —É—Ç–≤–µ—Ä–¥–∏–ª –æ–±–ª–æ–∂–∫—É! ‚úÖ';
                $text = "*–ö–Ω–∏–≥–∞:* " .  own_book::where('id', $this->own_book_id)->value('author') . ': "'
                    . own_book::where('id', $this->own_book_id)->value('title') . '"';
            }


            // –ü–æ—Å—ã–ª–∞–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–º
            Notification::route('telegram', '-506622812')
                ->notify(new TelegramNotification($title,
                    $text,
                    "–ï–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–¥–∞–Ω–∏—è",
                    route('own_books_page', $this->own_book_id)));

            return redirect()->to(url()->previous());


        }
    }

}
